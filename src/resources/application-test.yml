# application-test.yml - 테스트 환경 설정
spring:
  config:
    activate:
      on-profile: test

  # 테스트 데이터소스 (H2 인메모리)
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 1
      idle-timeout: 60000
      max-lifetime: 300000
      connection-timeout: 5000

  # H2 콘솔 (테스트용)
  h2:
    console:
      enabled: true
      path: /h2-console

  # JPA 설정 (테스트)
  jpa:
    hibernate:
      ddl-auto: create-drop  # 테스트마다 스키마 재생성
    show-sql: false  # 테스트 로그 간소화
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 10
        generate_statistics: false
        cache:
          use_second_level_cache: false
          use_query_cache: false

  # Redis 설정 (테스트 - 내장 또는 TestContainers)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 15  # 테스트용 별도 DB
      timeout: 1000ms
      jedis:
        pool:
          max-active: 5
          max-idle: 3
          min-idle: 1
          max-wait: 1000ms

  # 캐시 설정 (테스트)
  cache:
    type: redis
    redis:
      time-to-live: 60000  # 1분 (빠른 테스트를 위해 짧게)
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "llm:test:"

  # Jackson 설정 (테스트)
  jackson:
    serialization:
      write-dates-as-timestamps: false
      indent-output: true  # 테스트에서는 읽기 쉽게
    deserialization:
      fail-on-unknown-properties: false

  # 테스트 프로파일 설정
  test:
    database:
      replace: none  # TestContainers 사용 시

# 서버 설정 (테스트)
server:
  port: 0  # 랜덤 포트 (병렬 테스트 지원)
  error:
    include-exception: true
    include-stacktrace: always
    include-message: always

# LLM 설정 (테스트 - Mock 위주)
llm:
  models:
    # 테스트용 Mock 모델
    - name: "test-model"
      provider: "mock"
      endpoint: "http://localhost:8080/mock/api"
      apiKey: "test-key"
      maxTokens: 1000
      temperature: 0.7
      enabled: true
      limits:
        maxRequestsPerMinute: 1000
        maxTokensPerMinute: 100000
        maxConcurrentRequests: 10
        costPerInputToken: 0.0
        costPerOutputToken: 0.0
      features:
        supportsStreaming: true
        supportsFunctionCalling: true
        specializations: ["test"]

    # 실제 API 테스트용 (환경변수로 제어)
    - name: "gpt-3.5-turbo-test"
      provider: "openai"
      endpoint: "https://api.openai.com/v1/chat/completions"
      apiKey: "${OPENAI_TEST_API_KEY:test-key}"
      maxTokens: 100  # 테스트용 작은 값
      temperature: 0.1  # 일관된 결과를 위해 낮은 값
      enabled: ${ENABLE_REAL_API_TESTS:false}
      limits:
        maxRequestsPerMinute: 50
        maxTokensPerMinute: 5000
        maxConcurrentRequests: 5
        costPerInputToken: 0.0015
        costPerOutputToken: 0.002

    # vLLM 테스트용
    - name: "test-vllm"
      provider: "vllm"
      endpoint: "http://localhost:${VLLM_TEST_PORT:8099}/v1/chat/completions"
      model: "test-model"
      maxTokens: 100
      temperature: 0.1
      enabled: ${ENABLE_VLLM_TESTS:false}
      limits:
        maxRequestsPerMinute: 100
        maxTokensPerMinute: 10000
        maxConcurrentRequests: 10

  defaults:
    model: "test-model"
    timeout: 5000  # 빠른 테스트를 위해 짧은 타임아웃
    retryAttempts: 1  # 테스트에서는 재시도 최소화
    retryDelayMs: 100
    retryMultiplier: 1.5
    enableCircuitBreaker: false  # 테스트에서는 비활성화
    enableMetrics: false
    enableCaching: true

  retry:
    maxAttempts: 1
    initialDelayMs: 100
    multiplier: 1.5
    maxDelayMs: 1000
    enableJitter: false
    retryableErrors:
      - "TIMEOUT"
      - "CONNECTION_ERROR"

  security:
    enableApiKeyValidation: false  # 테스트에서는 간소화
    enableRateLimiting: false
    enableRequestLogging: true
    enableResponseLogging: true
    maskSensitiveData: false  # 테스트에서는 디버깅을 위해 비활성화
    maxRequestSizeKb: 1024
    requestsPerMinute: 10000
    allowedOrigins: ["*"]
    sensitiveFields: []

  monitoring:
    enableHealthChecks: true
    enableMetrics: false
    enableAlerts: false
    enablePerformanceTracking: false
    healthCheckIntervalSeconds: 5
    metricsIntervalSeconds: 10
    alertCheckIntervalSeconds: 10
    alertThresholds:
      errorRateThreshold: 0.5  # 테스트에서는 관대하게
      responseTimeThresholdMs: 30000
      requestVolumeThreshold: 1000
      cacheHitRateThreshold: 0.3
      cpuUsageThreshold: 0.9
      memoryUsageThreshold: 0.9

  cache:
    enableResponseCaching: true
    enableModelInfoCaching: true
    enableConfigCaching: true
    defaultTtlSeconds: 60
    responseCacheTtlSeconds: 300  # 5분
    modelInfoCacheTtlSeconds: 60
    configCacheTtlSeconds: 60
    maxCacheSizeMb: 10  # 테스트용 작은 캐시
    enableCacheMetrics: false
    enableCacheCompression: false

# vLLM 설정 (테스트)
vllm:
  servers:
    - name: "test-server"
      model: "test-model"
      port: ${VLLM_TEST_PORT:8099}
      host: "localhost"
      enabled: false  # 기본적으로 비활성화
      modelSettings:
        maxModelLen: 1024
        maxNumSeqs: 16
        dtype: "auto"
      performanceSettings:
        gpuMemoryUtilization: 0.5
        tensorParallelSize: 1
        pipelineParallelSize: 1
        disableLogStats: true
      quantizationSettings:
        quantization: null
        loadFormat: "auto"

  globalSettings:
    seed: 42
    disableLogRequests: true
    logLevel: "ERROR"
    requestTimeout: 10000
    enableMetrics: false

  resourceSettings:
    device: "cpu"  # 테스트에서는 CPU 사용
    numGpus: 0

  securitySettings:
    corsEnabled: true
    allowedOrigins: ["*"]

# 액추에이터 설정 (테스트)
management:
  endpoints:
    web:
      exposure:
        include: "*"  # 테스트에서는 모든 엔드포인트 노출
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true  # 테스트 종료용
  metrics:
    export:
      prometheus:
        enabled: false
    tags:
      environment: test
      service: llm-api-test

# 로깅 설정 (테스트)
logging:
  level:
    root: WARN
    com.yourcompany.llm: DEBUG
    org.springframework.test: INFO
    org.springframework.web: DEBUG
    org.testcontainers: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# 테스트 전용 설정
test:
  # Mock 서버 설정
  mock:
    enabled: true
    port: 8888
    responses:
      default:
        content: "This is a test response"
        tokensUsed: 10
        model: "test-model"
        provider: "mock"
      
  # 통합 테스트 설정
  integration:
    enableRealApiCalls: ${ENABLE_REAL_API_TESTS:false}
    enableVllmTests: ${ENABLE_VLLM_TESTS:false}
    enableRedisTests: ${ENABLE_REDIS_TESTS:true}
    enableDatabaseTests: true
    
  # 성능 테스트 설정
  performance:
    maxConcurrentRequests: 10
    testDurationSeconds: 30
    targetThroughput: 100
    
  # 부하 테스트 설정
  load:
    rampUpSeconds: 10
    steadyStateSeconds: 60
    rampDownSeconds: 10
    maxUsers: 50

# TestContainers 설정
testcontainers:
  reuse:
    enable: true  # 컨테이너 재사용으로 테스트 속도 향상

# JUnit 설정
junit:
  jupiter:
    execution:
      parallel:
        enabled: true
        mode:
          default: concurrent
        config:
          strategy: dynamic
          
# WireMock 설정 (외부 API Mocking)
wiremock:
  server:
    port: 8089
    httpsPort: 8443
  
# 테스트 데이터 설정
testdata:
  users:
    - username: "testuser1"
      apiKey: "test-key-1"
      rateLimit: 1000
    - username: "testuser2"
      apiKey: "test-key-2"
      rateLimit: 500
      
  requests:
    simple:
      model: "test-model"
      message: "Hello, world!"
      maxTokens: 50
    complex:
      model: "test-model"
      messages:
        - role: "user"
          content: "What is 2+2?"
        - role: "assistant"
          content: "2+2 equals 4."
        - role: "user"
          content: "What about 3+3?"
      temperature: 0.1
      maxTokens: 100

# 프로파일링 설정 (성능 테스트용)
profiling:
  enabled: ${ENABLE_PROFILING:false}
  samplingIntervalMs: 10
  outputDirectory: "target/profiling"
  
# 메모리 테스트 설정
memory:
  heapDumpOnOutOfMemory: true
  heapDumpPath: "target/heapdumps"
  maxHeapSize: "1g"

# 커스텀 테스트 어노테이션 활성화
custom:
  test:
    annotations:
      enableSlowTests: ${ENABLE_SLOW_TESTS:false}
      enableIntegrationTests: ${ENABLE_INTEGRATION_TESTS:true}
      enablePerformanceTests: ${ENABLE_PERFORMANCE_TESTS:false}